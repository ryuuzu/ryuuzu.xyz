name: Build and Deploy React Frontend

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GitHub Container Registry

    outputs:
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=,format=short # Creates a tag with the short commit SHA

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # This job runs only after the build-and-push job succeeds
    environment: production # Optional: for environment protection rules and secrets

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            # Define variables for clarity
            export IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
            export REPO_NAME=${{ github.repository }}
            export CONTAINER_NAME=portfolio-frontend

            echo "--- Pulling new image ghcr.io/$REPO_NAME:$IMAGE_TAG ---"
            docker pull ghcr.io/$REPO_NAME:$IMAGE_TAG

            echo "--- Stopping and removing old container if it exists ---"
            if [ "$(docker ps -q -f name=^/$CONTAINER_NAME$)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            echo "--- Starting new container ---"
            docker run -d \
              --name $CONTAINER_NAME \
              --restart always \
              --network global-docker-network \
              ghcr.io/$REPO_NAME:$IMAGE_TAG

            echo "--- Cleaning up old, unused images ---"
            docker image prune -af

            echo "--- Deployment successful! ---"
